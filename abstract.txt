This project aims at developing a two-pass assembler, which is a tool to convert an assembly language program to machine code. A symbol table is maintained which contains data pertaining to op-codes corresponding to the mnemonics available in the instruction set of the assembly language architecture and user-defined labels. Using this symbol table, the tool being built matches the op-code for each mnemonic that appears in the assembly code and produces as output the equivalent machine code in the form of object code or object listing. As the name suggests, the conversion process runs in two passes. The first pass populates the symbol table with the addresses of the user-defined labels obtained by the location counter. The second pass takes care of the object code and listing which is the output machine code. The assembler also has utilities like determining the size of the machine code and each instruction.
The two-pass assembler is planned to be implemented in Python owing to the fact that Python is a nifty language with a lot of text-processing and string-matching tools and itâ€™s ease in the portability of programs.